<?php
// $Id: sticky_notes.install,v 1.1.2.5 2010/09/24 10:38:01 berliner Exp $

/**
 * @file
 * Install, uninstall and update sticky_notes module
 */

/**
 * Implementation of hook_requirements().
 *
 * @return void
 * @author berliner
 */
function sticky_notes_requirements($phase) {
  $requirements = array();
  
  // Ensure translations don't break at install time
  $t = get_t();
  
  // call the modalframe implementation of hook_requirements manually to
  // check fo correct installation
  module_load_include('install', 'modalframe');
  $modalframe_requirements = modalframe_requirements('install');
  
  if (module_exists('jquery_ui') && module_exists('modalframe') && !count($modalframe_requirements)) {
    $requirements['sticky_notes'] = array(
      'title' => $t('Sticky Notes'),
      'severity' => REQUIREMENT_OK,
      'value' => $t('Correctly installed.'),
    );
  } else {
    
    $missing = array();
    $description = array();
    
    if (!module_exists('jquery_ui')) {
      $missing[] = 'jQuery UI';
      $description[] = $t('The <a href="@url">jQuery UI</a> module is missing or not correctly installed.', array('@url' => 'http://drupal.org/project/jquery_ui'));
    }
    
    if (!module_exists('modalframe')) {
      $missing[] = 'Modal Frame API';
      $description[] = $t('The <a href="@url">Modalframe API</a> module is missing or not correctly installed.', array('@url' => 'http://drupal.org/project/modalframe'));
    }
    
    $requirements['sticky_notes'] = array(
      'title' => $t('Sticky Notes'),
      'severity' => REQUIREMENT_ERROR,
      'value' => '1.x dev',
      'description' => implode('<br />', $description),
    );
  }
  
  return $requirements;
}

/**
 * Implementation of hook_install().
 *
 * @return void
 * @author berliner
 */

function sticky_notes_install() {
  drupal_install_schema('sticky_notes');
  drupal_set_message(
    st('Sticky Notes module has been installed. Set the ' .
      'preferences for your site on the ' .
      '<a href="@settings-page">settings page</a>',
    array('@settings-page' => url('admin/settings/sticky_notes')))
  );

}

/**
 * Implementation of hook_uninstall().
 *
 * @return void
 * @author berliner
 */

function sticky_notes_uninstall() {

  // remove the sticky notes tables
  drupal_uninstall_schema('sticky_notes');

  // remove the sticky notes settings from the variables table
  variable_del('sticky_notes_default_container_selector');
  variable_del('sticky_notes_minimal_zindex');
  variable_del('sticky_notes_auto_size');
  variable_del('sticky_notes_allow_node_operations');
  variable_del('sticky_notes_page_visibility_hide_on_load');
  variable_del('sticky_notes_width');
  variable_del('sticky_notes_height');
  variable_del('sticky_notes_note_color');
  variable_del('sticky_notes_text_color');
  variable_del('sticky_notes_character_limit');
  variable_del('sticky_notes_resizable');
  variable_del('sticky_notes_hide_on_page_load');
  variable_del('sticky_notes_show_on_admin');
  variable_del('sticky_notes_info_box_corner');
  variable_del('sticky_notes_info_box_hide');
  variable_del('sticky_notes_toggle_visibility_state');
  variable_del('sticky_notes_visibility_state_memory');
  variable_del('sticky_notes_page_visibility_type');
  variable_del('sticky_notes_page_visibility_pages');
  variable_del('sticky_notes_page_visibility_roles');
  variable_del('sticky_notes_default_priority_level');
  
  for ($i = 0; $i < STICKY_NOTES_PRIORITY_LEVEL_MAX_COUNT; $i++) {
    variable_del('sticky_notes_priority_name_' . $i);
    variable_del('sticky_notes_priority_color_' . $i);
  }
}

/**
 * Implementation of hook_schema().
 *
 * @return void
 * @author berliner
 */

function sticky_notes_schema() {

  $schema;

  $schema['node_sticky_note'] = array(
    'fields' => array(
      'nid' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'vid' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'position_x' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'position_y' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'position_z' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'attached_to' => array(
        'type'      => 'text',
        'default'   => NULL
      ),
      'width' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'height' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'link_path'  => array(
        'type'      => 'varchar',
        'length'    => 255,
        'not null'  => TRUE,
        'default'   => ''
      ),
      'link_pattern' => array(
        'type'      => 'varchar',
        'length'    => 255,
        'not null'  => TRUE,
        'default'   => ''
      ),
      'link_scope' => array(
        'type'      => 'varchar',
        'length'    => 10,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'origin_title' => array(
        'type'      => 'varchar',
        'length'    => 255,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'priority' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'default'   => 0
      ),
      'public' => array(
        'type'      => 'int',
        'unsigned'  => TRUE,
        'not null'  => TRUE,
        'size'      => 'tiny',
        'default'   => 0
      ),
    ),
    'primary' => array('vid'),
  );

  return $schema;

}


/**
 * Implementation of hook_update_n().
 * Add public field for improved sticky note access.
 */

function sticky_notes_update_6100() {
  $ret = array();
  db_add_field($ret, 'node_sticky_note', 'public', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'size' => 'tiny',
    'default' => 0
  ));
  return $ret;
}

/**
 * Implementation of hook_update_n().
 * Add width and height fields to make notes resizable.
 */
 
function sticky_notes_update_6101() {
  $ret = array();
  db_add_field($ret, 'node_sticky_note', 'width', array(
    'type'      => 'int',
    'unsigned'  => TRUE,
    'not null'  => TRUE,
    'default'   => 0
  ));
  db_add_field($ret, 'node_sticky_note', 'height', array(
    'type'      => 'int',
    'unsigned'  => TRUE,
    'not null'  => TRUE,
    'default'   => 0
  ));
  return $ret;
}

/**
 * Implementation of hook_update_n().
 * Add the title of the page where a note has been created.
 */
 
function sticky_notes_update_6102() {
  $ret = array();
  db_add_field($ret, 'node_sticky_note', 'origin_title', array(
    'type'      => 'varchar',
    'length'    => 255,
    'not null'  => TRUE,
    'default'   => 0
  ));
  return $ret;
}

/**
* Implementation of hook_update_n().
*/
 
function sticky_notes_update_6103() {
  $ret = array();
  db_query("UPDATE {node} n, {node_revisions} r SET n.title = LEFT(r.body, 80) WHERE n.vid = r.vid AND n.type = 'sticky_notes' AND n.title = ''");
  return $ret;
}

/**
 * Implementation of hook_update_n().
 * Add a field to store attachement information, so that notes "know" where they belong.
 */
 
function sticky_notes_update_6104() {
  $ret = array();
  db_add_field($ret, 'node_sticky_note', 'attached_to', array(
    'type'      => 'text',
    'default'   => NULL
  ));
  return $ret;
}

/**
 * Implementation of hook_update_n().
 */
 
function sticky_notes_update_6105() {
  $ret = array();
  $result = db_query("SELECT nid FROM {node} n WHERE n.type = 'sticky_notes'");
  while ($row = db_fetch_object($result)) {
    $node = node_load($row->nid);
    node_save($node);
  }
  return $ret;
}
